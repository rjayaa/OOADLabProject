package Customer;

import java.util.ArrayList;

import Controller.MenuController;
import DBConnection.Singleton;
import Model.FoodItem;
import Model.User;
import javafx.beans.binding.Bindings;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class OrderView extends Stage {
	
	private BorderPane root;
	private User currentUser;
	private Scene scene;
	private MenuController mc = new MenuController();
	private ArrayList<FoodItem> orderCart = new ArrayList<>();
	private ArrayList<Integer> orderQuantity = new ArrayList<>();
	private Button btnBack, btnConfirmOrder;
	
	private double btnWidth = 100;
    private double btnHeight = 30;
	public OrderView() {
		// TODO Auto-generated constructor stub
		super(StageStyle.DECORATED);
		this.currentUser = Singleton.getInstance().getCurrentUser();
		
		
		
		root = new BorderPane();
		scene = new Scene(root,800,600);
		
		this.setTitle("Mystic Grills");
		this.setScene(scene);
		
		btnBack = new Button("Back");
		btnBack.setPrefSize(btnWidth, btnHeight);
		
		
		Label lblMenuItem = new Label("Menu Items");
		
		HBox btnHbox = new HBox(10);
		btnHbox.getChildren().addAll(btnBack);
		btnHbox.setAlignment(Pos.TOP_LEFT);

		VBox topContent = new VBox();
		lblMenuItem.setAlignment(Pos.CENTER); 
		topContent.getChildren().addAll(btnHbox, lblMenuItem);
		topContent.setAlignment(Pos.CENTER);
		
		;
		// TABLE MENU
		VBox middleContent = new VBox();
		TableView<FoodItem> menuItemsTable = createMenuItem();
		
		int numrows = menuItemsTable.getItems().size();
		double rowHeight = 20;
		double maxTableHeight = rowHeight * numrows;
		getAllMenuItems(menuItemsTable);
		menuItemsTable.setColumnResizePolicy(TableView.UNCONSTRAINED_RESIZE_POLICY);
		menuItemsTable.setMaxHeight(200);
		menuItemsTable.setMaxWidth(570);
		Label lblMenuCart = new Label("Menu Carts");
		lblMenuCart.setAlignment(Pos.CENTER);
		middleContent.getChildren().addAll(menuItemsTable, lblMenuCart);
		middleContent.setAlignment(Pos.CENTER);
		
		
		root.setTop(topContent);
		root.setCenter(middleContent);
		
		
		
		
	}
	
	private void showMenuList() {
		TableView<FoodItem> menuItemsTable = createMenuItem();
		getAllMenuItems(menuItemsTable);
	}
	private void getAllMenuItems(TableView<FoodItem> menuItemsTable) {
		ArrayList<FoodItem> menuItemList = mc.showMenuItems() ;
		menuItemsTable.getItems().setAll(menuItemList);
	}
	
	private TableView<FoodItem> createMenuItem(){
		TableView<FoodItem> menuItemsTable = new TableView<>();

		TableColumn<FoodItem, String> idColumn = new TableColumn<>("Menu ID");

		idColumn.setCellValueFactory(new PropertyValueFactory<>("menuItemID"));
			

		TableColumn<FoodItem, String> nameColumn = new TableColumn<>("Menu Name");
		nameColumn.setCellValueFactory(new PropertyValueFactory<>("MenuItemName"));

		TableColumn<FoodItem, String> descriptionColumn = new TableColumn<>("Menu Description");
		descriptionColumn.setCellValueFactory(new PropertyValueFactory<>("MenuItemDescription"));

		TableColumn<FoodItem, Integer> priceColumn = new TableColumn<>("Menu Price");
		priceColumn.setCellValueFactory(new PropertyValueFactory<>("MenuItemPrice"));

		TableColumn<FoodItem, Void> actionColumn = new TableColumn<>("Add Order");

		actionColumn.setCellFactory(e -> new TableCell<>() {
			private Button addButton = new Button("Add");
			private HBox container = new HBox(10);
			private Label quantityLbl;
			private TextField quantityInput = new TextField();

			{
				quantityLbl = new Label("Quantity : ");
				addButton.setOnAction(e -> {

					FoodItem curr = getTableView().getItems().get(getIndex());
					QuantityInput qi = new QuantityInput(curr);
					qi.showAndWait();
					
					if(qi.isBtnPressed()) {
						orderCart.add(curr);
						orderQuantity.add(qi.getQty());
//						reloadPage();
					}
					
				});
				container.getChildren().addAll(quantityLbl, quantityInput, addButton);
			}

			protected void updateItem(Void item, boolean empty) {
				super.updateItem(item, empty);

				if (empty || getIndex() < 0 || getIndex() > menuItemsTable.getItems().size()) {
					setGraphic(null);
					return;
				}

				setGraphic(addButton);
			}

		});
		menuItemsTable.getColumns().add(idColumn);
		menuItemsTable.getColumns().add(nameColumn);
		menuItemsTable.getColumns().add(descriptionColumn);
		menuItemsTable.getColumns().add(priceColumn);
		menuItemsTable.getColumns().add(actionColumn);

		return menuItemsTable;
	}


}
